import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

TOKEN = "" # ‚Å°‚Å¢‚Å°‚Å¢‚Å£‚Å£–ü–û–ú–ï–ù–Ø–ô–¢–ï –¢–û–ö–ï–ù –ë–û–¢–ê –ù–ê –í–ê–®‚Å°

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_lines(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return [line.strip() for line in f.readlines()]
    except FileNotFoundError:
        return []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
motivator_lines = load_lines("motivator.txt")  # –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã
sovet_lines = load_lines("sovet.txt")  # –°–æ–≤–µ—Ç—ã

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—á–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# users —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {chat_id: {"fio": str, "role": str, "class": str}}
users = {}
reminders = []  # –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: (title, reminder_time, target)
user_message_state = {}  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "send_to_all" –∏–ª–∏ "reminder_all")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
registration_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£—á–µ–Ω–∏–∫"), KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")]
    ],
    resize_keyboard=True
)

compact_user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–≤–µ—Ç"), KeyboardButton(text="–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä")],
        [KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton(text="–£—á–∏—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

compact_admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–≤–µ—Ç"), KeyboardButton(text="–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä")],
        [KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton(text="–£—á–∏—Ç–µ–ª—è")],
        [KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º"), KeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")]
    ],
    resize_keyboard=True
)

dp = Dispatcher()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[chat_id] = {"fio": None, "role": None, "class": None}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (1, 2 –∏–ª–∏ 3 —Å–ª–æ–≤–∞):")

@dp.message()
async def message_handler(message: types.Message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ –≤—ã–∑–≤–∞–ª /start), –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start
    if chat_id not in users and message.text != "/start":
        await message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if message.text == "/start":
        users[chat_id] = {"fio": None, "role": None, "class": None}
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (1, 2 –∏–ª–∏ 3 —Å–ª–æ–≤–∞):")
        return

    # –≠—Ç–∞–ø 1: –í–≤–æ–¥ –§–ò–û
    if users[chat_id]["fio"] is None:
        fio = message.text.strip()
        if 1 <= len(fio.split()) <= 3:
            users[chat_id]["fio"] = fio
            await message.answer(f"–°–ø–∞—Å–∏–±–æ, {fio}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É):", reply_markup=registration_keyboard)
        else:
            await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 1, 2 –∏–ª–∏ 3 —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä —Ä–æ–ª–∏
    if users[chat_id]["role"] is None:
        role = message.text.strip().lower()
        if role in ["—É—á–µ–Ω–∏–∫", "—É—á–∏—Ç–µ–ª—å"]:
            users[chat_id]["role"] = role
            if role == "—É—á–∏—Ç–µ–ª—å":
                # –£—á–∏—Ç–µ–ª—è –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö users, –ø–æ—ç—Ç–æ–º—É –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ teachers –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω,
                # –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: teachers.append(users[chat_id]["fio"])
                pass
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10–ê):")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π: –£—á–µ–Ω–∏–∫ –∏–ª–∏ –£—á–∏—Ç–µ–ª—å.")
        return

    # –≠—Ç–∞–ø 3: –í–≤–æ–¥ –∫–ª–∞—Å—Å–∞
    if users[chat_id]["class"] is None:
        user_class = message.text.strip()
        users[chat_id]["class"] = user_class
        keyboard = compact_admin_keyboard if users[chat_id]["role"] == "—É—á–∏—Ç–µ–ª—å" else compact_user_keyboard
        await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∞ —Ä–æ–ª—å: {users[chat_id]['role'].capitalize()}, –∫–ª–∞—Å—Å: {user_class}.\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=keyboard)
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if users[chat_id]["fio"] and users[chat_id]["role"] and users[chat_id]["class"]:
        if message.text == "–°–æ–≤–µ—Ç":
            random_sovet = random.choice(sovet_lines) if sovet_lines else "–°–æ–≤–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            await message.answer(f"–í–∞—à —Å–æ–≤–µ—Ç:\nüí° {random_sovet}")
        elif message.text == "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä":
            random_motivator = random.choice(motivator_lines) if motivator_lines else "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            await message.answer(f"–í–∞—à –º–æ—Ç–∏–≤–∞—Ç–æ—Ä:\nüî• {random_motivator}")
        elif message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è; YYYY-MM-DD HH:MM")
        elif message.text == "–£—á–∏—Ç–µ–ª—è":
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∏—Ç–µ–ª–µ–π –ø–æ –∫–ª–∞—Å—Å—É: –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∞—Å—Å–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_class = users[chat_id]["class"]
            filtered_teachers = [data["fio"] for uid, data in users.items() 
                                 if data["role"] == "—É—á–∏—Ç–µ–ª—å" and data["class"] == current_class]
            if filtered_teachers:
                teacher_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=t, callback_data=f"contact_{t}")]
                    for t in filtered_teachers
                ])
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è:", reply_markup=teacher_keyboard)
            else:
                await message.answer("–í –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π.")
        elif message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º" and users[chat_id]["role"] == "—É—á–∏—Ç–µ–ª—å":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è; YYYY-MM-DD HH:MM")
            user_message_state[chat_id] = "reminder_all"
        elif message.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º" and users[chat_id]["role"] == "—É—á–∏—Ç–µ–ª—å":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            user_message_state[chat_id] = "send_to_all"
        # –ï—Å–ª–∏ —É—á–∏—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        elif chat_id in user_message_state and user_message_state[chat_id] == "reminder_all":
            try:
                title, datetime_str = message.text.split(";")
                reminder_time = datetime.strptime(datetime_str.strip(), "%Y-%m-%d %H:%M")
                reminders.append((title.strip(), reminder_time, "–≤—Å–µ–º"))
                await message.answer("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            except ValueError:
                await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è; YYYY-MM-DD HH:MM")
            del user_message_state[chat_id]
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ';' –∏ —Ñ–ª–∞–≥ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        elif ";" in message.text:
            try:
                title, datetime_str = message.text.split(";")
                reminder_time = datetime.strptime(datetime_str.strip(), "%Y-%m-%d %H:%M")
                reminders.append((title.strip(), reminder_time, chat_id))
                await message.answer("‚úÖ –õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            except ValueError:
                await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è; YYYY-MM-DD HH:MM")
        elif chat_id in user_message_state and user_message_state[chat_id] == "send_to_all":
            for uid in users.keys():
                await message.bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è {users[chat_id]['fio']}:\n\n{message.text}")
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            del user_message_state[chat_id]
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—á–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ callback
        elif chat_id in user_message_state:
            selected_teacher = user_message_state.pop(chat_id)
            teacher_chat_id = next((uid for uid, data in users.items() if data["fio"] == selected_teacher), None)
            if teacher_chat_id:
                await message.bot.send_message(teacher_chat_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[chat_id]['fio']}:\n\n{message.text}")
                await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é: {selected_teacher}.")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {selected_teacher}.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
    else:
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π
    if callback.data.startswith("contact_"):
        teacher_name = callback.data.split("_")[1]
        user_message_state[callback.from_user.id] = teacher_name
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è {teacher_name}:")
        await callback.answer()

async def send_reminders(bot: Bot):
    while True:
        now = datetime.now()
        due_reminders = [r for r in reminders if r[1] <= now]
        for title, reminder_time, target in due_reminders:
            reminders.remove((title, reminder_time, target))
            if target == "–≤—Å–µ–º":
                for uid in users.keys():
                    await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö:\n\n{title}")
            else:
                await bot.send_message(target, f"üîî –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{title}")
        await asyncio.sleep(60)

async def main():
    bot = Bot(TOKEN)
    asyncio.create_task(send_reminders(bot))  # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
    await dp.start_polling(bot)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
asyncio.run(main())
